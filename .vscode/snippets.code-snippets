{
	// Place your RDA-Game workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Service": {
		"prefix": ["service"],
		"body": ["local ${0:Name} = game:GetService(\"${0:Name}\")"],
		"description": "Roblox Service"
	},

	"ReplicatedStorage": {
		"prefix": ["replicatedStorage", "rs"],
		"body": ["local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")"],
		"description": "ReplicatedStorage"
	},

	"ServerStorage": {
		"prefix": ["serverStorage", "ss"],
		"body": ["local ServerStorage = game:GetService(\"ServerStorage\")"],
		"description": "ServerStorage"
	},

	"Packages": {
		"prefix": ["packages"],
		"body": ["local Packages = ReplicatedStorage:WaitForChild(\"Packages\")"],
		"description": "Packages"
	},

	"Class": {
		"prefix": ["class"],
		"body": [
			"local ${0:$TM_FILENAME_BASE} = {}",
			"${0:$TM_FILENAME_BASE}.__index = ${0:$TM_FILENAME_BASE}",
			"",
			"function ${0:$TM_FILENAME_BASE}.new()",
			"\tlocal self = setmetatable({}, ${0:$TM_FILENAME_BASE})",
			"",
			"\treturn self",
			"end",
			"",
			"function ${0:$TM_FILENAME_BASE}:Destroy() end",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			""
		],
		"description": "Lua class template"
	},

	"Require Knit": {
		"prefix": ["knit"],
		"body": ["local Knit = require(Packages.Knit)"],
		"description": "Require Knit"
	},

	"Require Knit Component": {
		"prefix": ["rkcomponent", "rkc"],
		"body": ["local Component = require(Packages.Component)"],
		"description": "Require Knit Component"
	},

	"Knit Service": {
		"prefix": ["kservice", "ks"],
		"body": [
			"local ${0:$TM_FILENAME_BASE} = Knit.CreateService({",
			"\tName = \"${0:$TM_FILENAME_BASE}\",",
			"\tClient = {},",
			"})",
			"",
			"function ${0:$TM_FILENAME_BASE}:KnitStart() end",
			"",
			"function ${0:$TM_FILENAME_BASE}:KnitInit() end",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			""
		],
		"description": "Knit Service template"
	},

	"Knit Controller": {
		"prefix": ["kcontroller", "kcont"],
		"body": [
			"",
			"local ${0:$TM_FILENAME_BASE} = Knit.CreateController({ Name = \"${0:$TM_FILENAME_BASE}\" })",
			"",
			"function ${0:$TM_FILENAME_BASE}:KnitStart() end",
			"",
			"function ${0:$TM_FILENAME_BASE}:KnitInit() end",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			""
		],
		"description": "Knit Controller template"
	},

	"Knit Component": {
		"prefix": ["kcomponnent", "kcomp"],
		"body": [
			"local ${0:$TM_FILENAME_BASE} = Component.new({",
			"\tTag = \"${0:$TM_FILENAME_BASE}\",",
			"\tAncestors = { workspace },",
			"\tExtensions = {},",
			"})",
			"",
			"function ${0:$TM_FILENAME_BASE}:Construct() end",
			"",
			"function ${0:$TM_FILENAME_BASE}:Start() end",
			"",
			"function ${0:$TM_FILENAME_BASE}:Stop() end",
			"",
			"return ${0:$TM_FILENAME_BASE}",
			""
		],
		"description": "Knit Component template"
	},

	"Fusion Init": {
		"prefix": "finit",
		"body": [
			"local Fusion = require(ReplicatedStorage.Packages.Fusion)",
			"",
			"local New = Fusion.New",
			"local State = Fusion.State",
			"local OnEvent = Fusion.OnEvent",
			"local Computed = Fusion.Computed",
		]
	},

	"Fusion Component": {
		"prefix": ["fcomp, fc"],
		"body": [
			"local function ${1:Name}()",
			"\treturn New(\"${0:Class}\")({",
			"\t\tName = \"${1:Name}\",",
			"\t})",
			"end"
		],
		"description": "Creates a new Fusion Component"
	}
}
